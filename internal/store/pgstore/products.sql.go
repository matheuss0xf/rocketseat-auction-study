// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: products.sql

package pgstore

import (
	"context"
	"time"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products ("id", "seller_id", "product_name", "description", "base_price", "auction_end")
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id
`

type CreateProductParams struct {
	ID          string    `json:"id"`
	SellerID    string    `json:"seller_id"`
	ProductName string    `json:"product_name"`
	Description string    `json:"description"`
	BasePrice   float64   `json:"base_price"`
	AuctionEnd  time.Time `json:"auction_end"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (string, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.ID,
		arg.SellerID,
		arg.ProductName,
		arg.Description,
		arg.BasePrice,
		arg.AuctionEnd,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getProductById = `-- name: GetProductById :one
SELECT id, seller_id, product_name, description, base_price, auction_end, is_sold, created_at, updated_at FROM products
WHERE id = $1
`

func (q *Queries) GetProductById(ctx context.Context, id string) (Product, error) {
	row := q.db.QueryRow(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.SellerID,
		&i.ProductName,
		&i.Description,
		&i.BasePrice,
		&i.AuctionEnd,
		&i.IsSold,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
